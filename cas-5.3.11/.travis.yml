# Steps to enable this build are:
#
# Generate the OAUTH-TOKEN at https://github.com/settings/applications
# Install travis: gem install travis
# Login to travis: travis login
# Encrypt the token: travis encrypt VAR_NAME=VAR_VALUE -r apereo/cas --add env.global
# Encrypted settings include SONATYPE_USER, SONATYPE_PWD, GH_TOKEN, COVERITY_SCAN_TOKEN, COVERALLS_REPO_TOKEN

language: java
sudo: true
dist: trusty
services:
- docker
branches:
  only:
  - 5.3.x
jdk:
- oraclejdk8
before_cache:
- rm -f  $HOME/.gradle/caches/modules-2/modules-2.lock
- rm -fr $HOME/.gradle/caches/*/plugin-resolution/
cache:
  bundler: false
  cargo: false
  directories:
  - $HOME/.m2
  - $HOME/.npm/
  - $HOME/.gradle/caches/
  - $HOME/.gradle/wrapper/
git:
  depth: 1
notifications:
  slack:
    secure: "gNFUOGd0isowSwPfQ9VqGQWhWRDAjzX9tfH0xGe2gyg1kiOhq3Odb8fdcUg9f3DhAbiMxGDu08IgmDbeEyncB42Zdqk/DFvD3F958WaVy0O9TF2iAzO+ftBG0+slFHPDZ8qAy97+mV/be7KBkLYP+BydYTVfO84NvpLNiylmOVU="
  webhooks:
    # Coveralls: https://docs.coveralls.io/parallel-build-webhook
    secure: "e3Lkn/iMpq9IjNrBQqMAKAxCbKUcd5t6zbow+l39a5n7trIUcBzgK9YXlSBigRyVnKXwNmI08WQN0GMJuWoT2u9cda5qttgZ5C8p/RFWxGKz6qhlmKwcwmipasU0ykvMARB6nrTMwMeMV/O5btt2xko8KfsRQdmqyZGJBglhDsc="
matrix:
  fast_finish: true
env:
  global:
  - JAVA_OPTS="-Xms512m -Xmx3048m -Xss128m -XX:ReservedCodeCacheSize=512m -XX:+UseG1GC -Xverify:none -server"
  - SPRING_MAIN_BANNER-MODE="off"
  - COVERALLS_PARALLEL=true
  - secure: "ScUSTo0if5m7ddnwUA7EaYucc6yzEUrKLk0DzCvkMfjn2h5taUFSKHx+S0hd2EzJofv+Em4eI5qncSK5LTxgD7HhHR1e3iZp+SqJenhhOnbuciZfg4QA+tUGw3XUdmREac5cz2l0qhi1q4vsnnZARj2d4vvf2HWuNtEOBu/ZAKI="
  - secure: "iWPPLKSS3zBs2adqLPkMiHfCj2hSLyD5BoV3oodhR7Ne83Kpn1khRcEWFoHF3Ed11eSU+glNdPSzUpc8TzwTZGx5B3RU2Qp36hZFyjuzNWJARmoVPYMiEg3FFBQrUR75w+Tbtn6zPkiAk6nl0K5ewmY0/xixVdnTLXL5HjpE2rc="
  - secure: "f3mDIZ8m6NYJXI8KvWD/sZRSeCCyIyfgPRy3Q6o9u9WyHZuYaJf95Ia0eJQ3gxUDS1TKL31Vk08dhFKrfIcKgifFPa2uQ2uyJkvGxlarMTQ+tpqsZYp4zAJgKc9r4xdZasvF2k4xqr+pl9AFjlpXB4jDD59XPXt3DcRABOYA9sM="
  - secure: "A0B1HJoHzvYGT4pPWPW1bQDS3Ne755vZ/VZ20OtVRgJHTTQfK13eKgH0VbYpEyZKJAFIexmaDVQ0XUdNukzrAoI6rKSm5vwam6qjELrvrKH2ovMgd1xvS2a5a1no5OT3QP3TXKKlmOTdS+Q5ZspjslBxpay3q7aKA9GMNvzChko="
before_install:
- mkdir -p ~/.gradle && echo "org.gradle.daemon=false" >> ~/.gradle/gradle.properties
- unset _JAVA_OPTIONS
- chmod -R 777 ./ci/*.sh
- ./ci/init-travis-build.sh
install: true
script:
- ./ci/script.sh
after_script:
- ./ci/stop.sh
stages:
- initialize
- publish
- build
- docpublish
- test
- dependencies
jobs:
  include:
  - stage: initialize
    script: ./ci/download-dependencies.sh
    name: "Download Dependencies"
    ############################################
  - stage: publish
    if: NOT commit_message =~ ^\[skip\s+snapshots\] and type != "pull_request" and (branch =~ /^\d+\.\d+\.x$/ or branch = master)
    script: ./ci/publish-snapshots.sh
    name: "Publish Snapshots"
    ############################################
  - stage: build
    script: ./ci/build.sh
    name: "Build CAS"
  - stage: build
    script: ./ci/analyze-style.sh
    name: "Analyze Style"
  - stage: build
    script: ./ci/html-proofer-docs.sh
    if: (branch =~ /^\d+\.\d+\.x$/ or branch = master)
    name: "Validate Documentation"
  - stage: build
    script: ./ci/build-javadocs.sh
    name: "Build Javadocs"
  - stage: build
    script: ./ci/build-config-metadata.sh
    name: "Generate Config Metadata"
    ############################################
  - stage: docpublish
    script: ./ci/push-docs-ghpages.sh
    if: type != pull_request and (branch =~ /^\d+\.\d+\.x$/ or branch = master)
    name: "Publish Documentation"
    ############################################
  - stage: dependencies
    script: ./ci/analyze-dependencies.sh
    name: "Analyze Dependencies"
#   - stage: dependencies
#     if: type != pull_request and (branch =~ /^\d+\.\d+\.x$/ or branch = master)
#     script: ./ci/report-dependency-updates.sh
#     name: "Report Dependency Updates"
    ############################################
  - stage: test
    script: ./ci/tests/run-tests-simple.sh
    name: "Simple Tests"
  - stage: test
    script: ./ci/tests/cassandra/run-tests-cassandra.sh
    name: "Cassandra Tests"
  - stage: test
    script: ./ci/tests/cosmosdb/run-tests-cosmosdb.sh
    name: "CosmosDb Tests"
  - stage: test
    script: ./ci/tests/couchbase/run-tests-couchbase.sh
    name: "Couchbase Tests"
  - stage: test
    script: ./ci/tests/dynamodb/run-tests-dynamodb.sh
    name: "DynamoDb Tests"
  - stage: test
    script: ./ci/tests/filesystem/run-tests-filesystem.sh
    name: "Filesystem Tests"
  - stage: test
    script: ./ci/tests/ignite/run-tests-ignite.sh
    name: "Ignite Tests"
  - stage: test
    script: ./ci/tests/influxdb/run-tests-influxdb.sh
    name: "InfluxDb Tests"
  - stage: test
    script: ./ci/tests/ldap/run-tests-ldap.sh
    name: "LDAP Tests"
  - stage: test
    script: ./ci/tests/mail/run-tests-mail.sh
    name: "Mail Tests"
  - stage: test
    script: ./ci/tests/couchdb/run-tests-couchdb.sh
    name: "CouchDb Tests"
  - stage: test
    script: ./ci/tests/memcached/run-tests-memcached.sh
    name: "Memcached Tests"
  - stage: test
    script: ./ci/tests/mysql/run-tests-mysql.sh
    name: "Mysql Tests"
  - stage: test
    script: ./ci/tests/mssqlserver/run-tests-mssqlserver.sh
    name: "MS SQL Server Tests"
  - stage: test
    script: ./ci/tests/postgres/run-tests-postgres.sh
    name: "Postgres Tests"
  - stage: test
    script: ./ci/tests/mongodb/run-tests-mongodb.sh
    name: "MongoDb Tests"
  - stage: test
    script: ./ci/tests/redis/run-tests-redis.sh
    name: "Redis Tests"
